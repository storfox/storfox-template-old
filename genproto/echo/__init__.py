# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: protos/echo.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator, Dict, List

import betterproto
from betterproto.grpc.grpclib_server import ServiceBase
import grpclib


@dataclass(eq=False, repr=False)
class EchoRequest(betterproto.Message):
    value: str = betterproto.string_field(1)
    # Number of extra times to echo
    extra_times: int = betterproto.uint32_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class EchoResponse(betterproto.Message):
    hello: "EchoResponseHello" = betterproto.message_field(2)
    values: List[str] = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class EchoResponseHello(betterproto.Message):
    message: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class EchoStreamResponse(betterproto.Message):
    value: str = betterproto.string_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class EchoStub(betterproto.ServiceStub):
    async def echo(self, *, value: str = "", extra_times: int = 0) -> "EchoResponse":

        request = EchoRequest()
        request.value = value
        request.extra_times = extra_times

        return await self._unary_unary("/echo.Echo/Echo", request, EchoResponse)

    async def echo_stream(
        self, *, value: str = "", extra_times: int = 0
    ) -> AsyncIterator["EchoStreamResponse"]:

        request = EchoRequest()
        request.value = value
        request.extra_times = extra_times

        async for response in self._unary_stream(
            "/echo.Echo/EchoStream",
            request,
            EchoStreamResponse,
        ):
            yield response


class EchoBase(ServiceBase):
    async def echo(self, value: str, extra_times: int) -> "EchoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def echo_stream(
        self, value: str, extra_times: int
    ) -> AsyncIterator["EchoStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_echo(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "value": request.value,
            "extra_times": request.extra_times,
        }

        response = await self.echo(**request_kwargs)
        await stream.send_message(response)

    async def __rpc_echo_stream(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "value": request.value,
            "extra_times": request.extra_times,
        }

        await self._call_rpc_handler_server_stream(
            self.echo_stream,
            stream,
            request_kwargs,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/echo.Echo/Echo": grpclib.const.Handler(
                self.__rpc_echo,
                grpclib.const.Cardinality.UNARY_UNARY,
                EchoRequest,
                EchoResponse,
            ),
            "/echo.Echo/EchoStream": grpclib.const.Handler(
                self.__rpc_echo_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                EchoRequest,
                EchoStreamResponse,
            ),
        }
